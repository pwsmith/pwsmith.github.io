I"ût<p><em>So, so, many things</em>.
But, I mean things I wish I knew from a <em>techincal</em> standpoint, not just things about academia and/or life in general.
The way I handled paper writing and research in the early days of was vastly different from how I do it now.
If I had started off this way, it would have saved a lot of time in the long run.
Itâ€™s true and to be expected that everyoneâ€™s work flow evolves over time, but the basic set up one uses has a big influence on how you write, and the amount of time spent doing tasks related to that.
I think Iâ€™ve got a nice set-up now â€” certainly not perfect (itâ€™s not something one can measure extensively), but it works for me â€” and below I share some tips that Iâ€™d give to anyone starting their PhD, especially as a linguist, but I think a lot of this holds for most disciplines.</p>

<p>When I started graduate school in Connecticut in 2010, I used the same computer setup that I did when I did my BA studies.
That meant, everything was done in Microsoft Office (realistically, 99% Microsoft Word).
Quite early on at Conencticut I bought a Macbook Pro, which meant switiching to Appleâ€™s software (I didnâ€™t want to buy Office for Mac, when Pages â€” at the time â€“ was sufficient for what I was doing).
Around 2014, Iâ€™d reached the limits of what I could do with this: Iâ€™d wrestled with these programs enough for writing, but two journal submissions finally highlighted the need to not waste time anymore on example numbering and bibliography management, so I decided to switch the way I wrote papers to using LaTeX.
That, but mostly my wife Beata was using LaTeX and I got intrigued.
I wish Iâ€™d done it earlier, and learned it at a time I wasnâ€™t writing job and project applications, and my thesis (all at the same time, fun times).
This applies not only to using LaTeX, but also to having a streamlined set-up in the way I do now.</p>

<h2 id="use-latex">Use LaTeXâ€¦</h2>

<p>The debate of LaTeX vs. what-you-see-is-what-you-get (WYSIWYG) programs like Word and Pages, is well discussed, and can incite strong opinions.
Those in favour of LaTeX point to the severance of the writing itself from formatting.
LaTeX is written in plain text, and then LaTeX itself handles the formatting very intelligently.
In an ideal case, this means one can focus more attention on the content rather than the formatting, which whilst potentially true, is a very idealised version of using LaTeX.
It ignores time spent identifying and fixing errors as well as fixing your preamble so that the appearance is how you want it (not everyone, I know) as well as a number of other things that distract from the writing process.
Those in favour of WYSIWYG writing point out that the learning curve for LaTeX is outlandishly steep, that collaborations often require using WYSIWYG programs as collaborators donâ€™t use LaTeX, and that some journals â€” inexplicably â€” require final versions of paper in .docx format.</p>

<p>Iâ€™m a big fan of LaTeX.
In my experience itâ€™s mind-numbingly frustrating to learn at times, but once you know it well enough, itâ€™s no less easy than using Word.
Whilst many people have a complexity fear of LaTeX â€” looking at its code out of the blue is duanting if you donâ€™t know what you are looking at â€” I find that LaTeX is not difficult to use, itâ€™s the diagnosing of errors that is tough and time consuming.
Once you know your way around these, then itâ€™s a fantastic tool.
For those not versed, here is why you should use LaTeX, particularly as a linguist:</p>
<ul>
  <li>Bibliography management is simple.</li>
  <li>Numbering of examples is done automatically.</li>
  <li>It will handle formatting mostly well</li>
  <li>Itâ€™s probably the best suited software for generating articles with the typesetting requirements that linguistics needs.</li>
  <li>It makes life very easy to use non-latin characters, and to combine accents with them.</li>
</ul>

<p>There are easier options of writing in plain text (for instance markdown), but these often lack the required support to format linguistics papers.
For instance, automatic numbering, glossing alignment, tree drawing, are all not easily done using markdown (there are workarounds).</p>

<p>As I said, Iâ€™m not here to give an overview of why LaTeX is good for academic publications.
Many of these exist already see <a href="https://tex.stackexchange.com/questions/1756/why-should-i-use-latex">here</a> for a general discussion, and for a lingusitics specific set up, see <a href="https://www1.essex.ac.uk/linguistics/external/clmt/latex4ling/">Latex for Linguists (Essex-style), from Doug Arnold</a> and <a href="https://home.uni-leipzig.de/assmann/teaching/SS18/skript_latex.pdf">Latex for Linguists (Leipzig-style), from Anke Himmelreich</a>.</p>

<h3 id="but-recognise-its-limits">â€¦but recognise its limits</h3>

<p>Firstly, as noted, LaTeX has a steep learning curve.
If youâ€™re only interested in using it to write a single project (paper, thesis) and your entire background is with Word, itâ€™s likely that itâ€™ll be quicker and easier for you to just use Word.
If you want to use LaTeX for more projects in the future, then put the time in early and it will save you a lot of time in the future.
Thatâ€™s why I wish I knew it at the beginning.
The beginning of a PhD is a great time when you have two things youâ€™ll lack later on: time and motivation, so itâ€™s good to pick up skills then.
It does take time and effort to trawl through error messages trying to figure out what the problem was (yes, LaTeX gives you pointers in the console, but theyâ€™re often cryptic to most).</p>

<p>Secondly, as <a href="https://dev.to/hoffmann/lets-find-something-better-then-latex">this article</a> points out, whilst LaTeX is a great piece of software, itâ€™s still an old piece of software that has developed over many, <em>many</em> years by now.
That means that some of the packages that you need to use may conflict, and thereâ€™s little chance of an update fixing it.
Whilst this is a minor concern in the time Iâ€™ve been using it, it does happen.
Anyone who has tried to compile in XeLaTeX (e.g. if youâ€™re requireed to use fontspec) and tried to use TIPA for phonetic symbols has likely run into this.</p>

<h3 id="and-use-it-properly">â€¦and use it properly</h3>

<p>That said, LaTeX for me is still the best choice for writing articles in.
But, there are things that you can do to enhance the experience of it.</p>

<h4 id="use-a-good-text-editor">Use a good text editor</h4>

<p>I canâ€™t stress this enough.
For many people, the entry into using LaTeX is the software that comes bundled with the download.
I canâ€™t speak for windows users here, but if you are a Mac user itâ€™s not unlikely that your first foray into LaTeX use was using <a href="https://pages.uoregon.edu/koch/texshop/">TeXShop</a>.
This is a very good program, is free to use and comes bundled with MacTeX (likely what you downloaded LaTeX with on your mac), and will get the job done.
However, other editors offer a lot more customisation and shortcuts that are missing in TeXShop.
For instance, <a href="https://www.gnu.org/software/emacs/">Emacs</a>, Atom (https://atom.io/) and <a href="https://www.sublimetext.com/3">Sublime</a> all offer extensible options to make your writing easier.
Thereâ€™s also Microsoftâ€™s <a href="https://code.visualstudio.com/">Visual Studio Code</a>, which is also fantastic, though I find slightly less suited to LaTeX than Atom or Sublime.
All offer bibliography integration directly so you can search for citations in your bibliography file without leaving the program, useful if you know the name of the author of the source, but canâ€™t remember the full citation key:</p>

<p><img src="/assets/images/atom_biblio.png" alt="/assets/images/atom_biblio.png" /></p>

<p>They also offer a range of syntax highlighting options and automatic indentation to make your text easier to read in the source file
Finally, they offer the ability to define your own keybindings and snippets.
Snippets for instance allow you to automatically insert a block of text by specifying a keyword.
For instance, one of mine is such that typing <code class="highlighter-rouge">exe</code> and hitting <code class="highlighter-rouge">tab</code>, causes the following code to appear, with the cursor placed after <code class="highlighter-rouge">\ex </code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{exe}
  \ex
\end{exe}
</code></pre></div></div>

<p>Itâ€™s a relatively simple one, but saves <em>a lot</em> of typing, and they can go as complex as you want.
Another of mine, <code class="highlighter-rouge">tree</code> + <code class="highlighter-rouge">tab</code> gives:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{exe}
  \ex
  \begin{tikzpicture}[baseline]
    \Tree [ ]
  \end{tikzpicture}
\end{exe}
</code></pre></div></div>

<p>If youâ€™ve ever written bulletpointed slides in beamer, having a shortcut to input:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{itemize}
  \item
\end{itemize}
</code></pre></div></div>

<p>will save your wrists, and add <em>years</em> to your life, I swear.</p>

<h4 id="type-in-unicode">Type in Unicode</h4>

<p>This is more of a preference than a necessity, but it comes with more benefits than youâ€™d think.
Typing phonetic symbols in LaTeX is traditionally the domain of TIPA.
Thereâ€™s nothing inherently wrong with TIPA: itâ€™s a good package that allows for the output of the IPA.
What more do you need?
The <em>problem</em> with TIPA is what it does to your source code.<sup id="fnref:TIPA"><a href="#fn:TIPA" class="footnote">1</a></sup>
Writing something simple in TIPA like the pronunctiation of <em>placate</em> /plÉ™ËˆkeÉªt/ will need the following code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\textipa{pl@'ke1t}
</code></pre></div></div>

<p>And like I said, thereâ€™s nothing inherently wrong with this.
The problem is if you have a bunch of examples like this that you want to use elsewhere.
Suppose that you want to put them in an email, import them into a word document, put them in webpage or work with someone like me who doesnâ€™t use TIPA.
You then need to manually go through the entire set of examples, manually chaning <code class="highlighter-rouge">@</code> to <code class="highlighter-rouge">É™</code>, <code class="highlighter-rouge">N</code> to <code class="highlighter-rouge">Å‹</code> and so on.</p>

<p>A better way of working, which avoids all these problems is simply to input the code directly using unicode.
This can be tricky in the beginning but qiuckly becomes easier.
To do this, you need a good text editor, which allows you to enter unicode characters.<sup id="fnref:unicode"><a href="#fn:unicode" class="footnote">2</a></sup>
Emacs does this natively with the sequnce <code class="highlighter-rouge">ctrl+x 8 RET</code>.
With both Atom and Sublime, you can download the excellent package Character Table (<a href="https://atom.io/packages/character-table">Atom</a>) (<a href="https://packagecontrol.io/packages/Character%20Table">Sublime</a>), which allows you to search by either unicode combination or by character name:</p>

<p><img src="/assets/images/unicode_search.png" alt="unicode search in atom" /></p>

<p>Using unicode symbols also requires you to use XeLaTeX (or at least, not pdflatex) so that the characters can be recognised.
You also need to use a font that outputs the characters, like <a href="http://libertine-fonts.org/">Libertine</a>, or the SIL fonts like <a href="https://software.sil.org/doulos/">Doulos</a> or <a href="https://software.sil.org/charis/">Charis</a>.<sup id="fnref:fonts"><a href="#fn:fonts" class="footnote">3</a></sup></p>

<p>Using this method, in order to output /plÉ™ËˆkeÉªt/, you simply input /plÉ™ËˆkeÉªt/ into your document.
And you can then copy-paste it into other formats: word documents, html documents, markdown and emails will all recognise the symbols, assuming that the font youâ€™re using does too.
Thus, in order to allow your data to be as easily used by other formats, you should be typing in LaTeX.
If you never venture outside of LaTeX, then not using TIPA is not a big deal.
But in my experience, itâ€™s a matter of time before you want to use the examples outside of LaTeX, so itâ€™s worthwhile getting familiar with unicode now.
For a very worthwhile introduction specifically aimed at lingusits, Iâ€™d advise the (open access) book <a href="http://langsci-press.org/catalog/book/176">The Unicode cookbook for linguists</a> BY Steven Moran and Michael Cysouw.</p>

<h4 id="use-a-local-preamble">Use a local preamble</h4>

<p>Yes, I know, <em>use the preamble thatâ€™s appropriate for your paper</em>, i.e. load only the packages that you need.
However, at some point your LaTeX preamble (for the uninitiated, the set of packages you specify for LaTeX to use to do things not covered by the default compiler) will be a set of packages that you always use.
Rather than having one document from where you copy-paste your preamble time after time, just store it locally.
For instance, suppose that your preamble you use for everything is as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\usepackage{fontspec}
\setmainfont{Linux Libertine O}
\usepackage[
    backend=biber,
    style=authoryear,
    natbib,
    url=false,
    doi=true,
    eprint=false,
    maxbibnames=99,
    useprefix=true
]{biblatex}
\addbibresource{&lt;PATH TO YOUR BIBLIOGRAPHY&gt;}

%%% Formatting and font
\usepackage{csquotes}
\usepackage{enumerate}
\usepackage{fontspec} % Font selection for XeLaTeX; see fontspec.pdf for documentation
\defaultfontfeatures{Mapping=tex-text} % to support TeX conventions like ``---''
\usepackage{xunicode} % Unicode support for LaTeX character names (accents, European chars, etc)
\setmainfont{Linux Libertine O}

%%% TIKZ
\usepackage{tikz}
\usepackage{tikz-qtree-compat}

%%% Other
\usepackage[normalem]{ulem}
\usepackage{pifont}
\usepackage{multirow}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{xcolor}
\definecolor{bgblue}{HTML}{AECDF0}
\definecolor{bgblue}{HTML}{AECDF0}
\definecolor{hlblue}{HTML}{0C6FAB}
\definecolor{bgbluet}{HTML}{455260}
\definecolor{ngrey}{HTML}{949292}
\definecolor{linkgr}{HTML}{0b5496}
\usepackage{graphicx} % support the \includegraphics command and options
\usepackage{gb4e}
</code></pre></div></div>

<p>This is roughly what I use each time I write a document, or at least often enough that I like to have them always there.
Instead of continually either copy-pasting this from an existing file, or, god forbid, manually typing it time after time, itâ€™s better to save the text in a file like <code class="highlighter-rouge">packages.sty</code>, and put it in a position that TeX will look (your PATH).
For Linux, this means in a directory <code class="highlighter-rouge">USER &gt; texmf &gt; tex &gt; latex &gt; local</code> (USER = your user account on the computer, you can normally just use <code class="highlighter-rouge">~</code> as a shorthand in place of USER, but <strong>not</strong> always).<sup id="fnref:maclibrary"><a href="#fn:maclibrary" class="footnote">4</a></sup>
Then any files you store there will be visible to tex.
So, if you were to copy your usual preamble into the file <code class="highlighter-rouge">packages.sty</code>, and save it in the local directory (as just specified), then all you need is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="p">{</span>article<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>packages<span class="p">}</span>
...
<span class="nt">\begin{document}</span>
**write paper here**
<span class="nt">\end{document}</span>
</code></pre></div></div>

<p>and TeX will use everything you specified in that file as part of your preamble to the document youâ€™re writing.
Just fill in anything extra you need in your preamble where <code class="highlighter-rouge">...</code> is in the above, and all your preamble is there.</p>

<h4 id="miscellaneous-tips">Miscellaneous tips</h4>

<ul>
  <li>Donâ€™t type a whole paragraph in a line in the text editor. When you use synctex to sync between pdf and your editor, synctex matches the part in the pdf with the line of code in the source file. So, if that line consists of a whole paragraph, youâ€™ve narrowed the search down to, well a paragraph. Sure, youâ€™re in the right part of the source code, but you still need to look through that paragraph manually to find the right place. A better practice is to <strong>make each sentence its own line in the source file</strong>. Thus, when you sync to a particular place, you get taken to that sentence in the source file, and so finding the precise place is a <em>lot</em> quicker. When writing, note that hitting <code class="highlighter-rouge">enter</code> in the source file doesnâ€™t start a new line in the output. Two sentences split over two consecutive lines is treated as part of the same paragraph. So there is no difference between:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Here is the first sentence.
And here is the second.
</code></pre></div>    </div>
    <p>And this:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Here is the first line. And here is the second.
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="version-control-learn-git">Version Control: Learn Git</h2>

<p>Iâ€™m not an expert on git by any stretch.
I use it a lot for writing papers and for storing class grades, but use it less than a software developer would, which is to be expected, but here is a brief explainer why you should use it for your writing.</p>

<p>In short, git allows you to save different versions (snapshots) of a document within the same document.
That way, if you ever want to revert that document to a previous state you can.
To put it in terms of an example, letâ€™s imagine you write a paper and have finished it, and send it to people for comments.
You get a comment back saying you should change section 2, and you do.
Then, you reread it, but donâ€™t like what you changed, so you want to go back to the way it was.
How?
Yes, you can hit <code class="highlighter-rouge">command + z</code> to undo every change, but at some point, we need to recognise that this isnâ€™t the <em>best</em> strategy.
Alternatively, you can do what a lot of people I know (and myself, in a previous life) and make a new version of the paper, so you keep the old version unchanged.
If you donâ€™t like it, just use the old one again.
Again, it works, but itâ€™s not a long term solution for good file storage.
With git, you can simply choose to save the document at a specific stage which will create a â€˜commitâ€™.
If you change it, you can choose which â€˜commitâ€™ to revert to.
Thus you only need one document on your system, and the entire history of that document will lie in that, along with meta-comments and a record of changes.
In short, it helps you avoid <a href="http://phdcomics.com/comics/archive_print.php?comicid=1531">this</a>.
Itâ€™s incredibly useful to have this record of past versions, to allow you to go back to other states, and feel free to alter text without fear of having to potentially re-type what you already did.</p>

<p>Another benefit is with collaboration.
The biggest project collaboration I did was with Beata Moskal, Jonathan Bobaljik, Jungmin Kang and Ting Xu, which eventually appeared in <a href="https://link.springer.com/article/10.1007/s11049-018-9425-0">NLLT</a>.
We did it the wrong way for a long time.
Not in terms of content, but the way we worked on the same document was to share a document with Dropbox, and each would have access.
Dropbox is a great service, but itâ€™s not suited to this.
It doesnâ€™t allow for two people to work on the same document at the same time, meaning if person A works on the file while person B works on the file, one of you (or both, maybe?) will hit save, and a â€˜conflicted copyâ€™ will be created with that persons changes, while the other will save to the actual document, and their changes will appear in that.
Eventually, we had to ensure that we let each other know when we were working on the file, so that no one else would try to at the same time.
It worked, but about as well as youâ€™d expect.</p>

<p>When I got sick of this, I set up the project on <a href="https://www.overleaf.com/">Overleaf</a>, which is an online LaTeX editor that (at the time) allowed for multiple people to work on a LaTeX file at the same time online.<sup id="fnref:overleaf"><a href="#fn:overleaf" class="footnote">5</a></sup>
So, whilst you donâ€™t need to know git in order to get past the dropbox issue, I have my misgivings about Overleaf.
Firstly, when I used it, the editor was terrible.
It did what it needed to, but lacked the benefits I outline above about other text editors.
It can also be frustratingly slow, the error resolving is not good, and now you need to subscribe in order to collaborate (â‚¬168, which is insane).</p>

<p>Git however, is smart enough to figure this out, and allow real-time collaboration.
So, person A can work on the document, and commit their changes, while person B does so concurrently, and git figures out where each of the changes should lie in the document.
Best of all, you donâ€™t need to be online (like in Overleaf), but rather, you can pull the up-to-date version of the document and work offline, before pushing your changes when you connect again (great for working on trains and in cafes that lack stable wifi: hi Germany!).</p>

<p>There are some downsides.
Introduction tutorials can be daunting,<sup id="fnref:githubtutorial"><a href="#fn:githubtutorial" class="footnote">6</a></sup> but it is possible to find some to explainers, e.g. <a href="https://hackernoon.com/understanding-git-fcffd87c15a3">here</a> and collected <a href="https://medium.com/quick-code/top-tutorials-to-learn-git-for-beginners-622289ffdfe5">here</a>.
I used to use the one by <a href="https://github.com/jabranham">J. Alexander Branham</a>, but his website has disappeared, sadly.</p>

<p>Two further things to mention.
Git allows you to sync things across computers.
Git works best when you pair it with a remote repository, hosted by, for instance, <a href="https://github.com/">github</a> or <a href="https://gitlab.com">gitlab</a>.
Both of these offer free services for non-commerical use, private repositories and are very stable.
If you push your document to one of these, you can clone it on a different computer, work on the changes there, and before pushing the changes, and accessing them at your own computer.
This allows for easy syncing between home and office, for instance.
Think of it like dropbox, but for text files.</p>

<p>Secondly, it will only work right with plain text files.
That means, you get all the benefits that git offers for .tex, .txt, .py, .js, .html, .css <em>etc.</em>, but non-text files like .docx, .pdf, or .png â€” whilst able to be tracked and shared â€” wonâ€™t show version history.
So, if you are going to use git, you need write in plain text (realisitically either LaTeX or markdown for most linguists), and if you are going to write in plain text you should be using git.</p>

<h2 id="dont-be-afraid-to-look-beyond-latex-and-latex-defaults">Donâ€™t be afraid to look beyond LaTeX and LaTeX defaults</h2>

<p>Whilst I maintain that LaTeX is the best way to write articles, that doesnâ€™t mean that itâ€™s the only thing out there, for all purposes.
Iâ€™ve concentrated on article writing above, but a lot of people use LaTeX for a variety of other reasons, notably making slides with beamer.
Thereâ€™s nothing wrong with beamer: Iâ€™ve used it a lot and am very happy with the results.</p>

<p>However, letâ€™s face it, the default beamer formats are quite uninspiring.
Thereâ€™s not a whole lot of them, lots of people use them, so many beamer slides look the same.
Yes, this is a question of aesthetics, which shouldnâ€™t be foremost in your mind when preparing slides, obviously the content is far more important.
But, a slide show that is well set out in terms of content <em>and</em> looks good can make a big difference to how the audience responds to your talk.
So, here are a couple of tips.</p>

<h4 id="use-other-beamer-themes">Use other beamer themes</h4>

<p>Look around online and youâ€™ll find a lot of these, where people have created to get away from the beamer defaults.
The best that Iâ€™ve seen, is <a href="https://github.com/matze/mtheme">Metropolis</a>, which looks great.
Otherwise, with a little bit of time, you can create your own.
Building on <a href="https://tex.stackexchange.com/questions/146529/design-a-custom-beamer-theme-from-scratch/146682#146682">this StackExchange answer</a>, I built <a href="https://github.com/pwsmith/beamerthemesof">my own</a>, which Iâ€™m pretty happy with.</p>

<h4 id="stay-away-from-the-junk-at-the-top-of-slides">Stay away from the junk at the top of slides</h4>

<p>Iâ€™ve seen a lot of presentations with beamer, and itâ€™s depressingly often that the top quarter of the screen is taken up by a constant table of contents, with progression guides.
Iâ€™ve never understood the point here (though fallen into the trap myself in the past).
What is this supposed to achieve?
I can see in principle a benefit: that the speaker wants to allow the audience to follow the strcture of the talk.
However, itâ€™s emminently possible to do this in the beginning of the talk, and before transitions between sections.
In practice, having a constant guide at the top only allows me to check when the talk is going to end, or which bits I can tune out of before something relevant will happen.
So, I may be alone here, but get rid of the guide: itâ€™s unnecessary, takes up space that could be better used for content, and often distracts from your talk.</p>

<h4 id="for-the-love-of-everything-dont-copy-paste-an-article-or-a-handout-into-slides">For the love of everything, <strong>donâ€™t</strong> copy-paste an article or a handout into slides</h4>

<p>Iâ€™ve also seen this a lot.
Beamer is LaTeX, so therefore, LaTeX code makes up the slides.
Therefore, you can just copy-paste parts of a paper into slides.
Right.</p>

<p>Iâ€™ve seen people copy-paste paragraphs and multiple sentences into a slide bullet point.
Often this is because they make a handout to go along with the talk, and the slides are formed from the handout.
But, donâ€™t.
<em>Just, donâ€™t.</em>
Making captivating, easy to follow slides is a lot different from making a handout.
Slides should be used as a support to the narrative, detailed handouts are used also as support but also to allow people to follow at home without the talk.
They are <em>not</em> the same thing and require different layouts.</p>

<h4 id="look-at-alternatives">Look at alternatives</h4>

<p>Whilst the major benefit of beamer is that it slots easily into your LaTeX workflow, there are other options.
Itâ€™s possible to write slides in markdown, and convert them to a variety of formats using <a href="https://pandoc.org/">pandoc</a>.
One of my favourites here is the html based options, especially <a href="https://revealjs.com/#/">reveal.js</a>.
This is a javascript based, and will produce slides in html format that you can style using css.
No, itâ€™s not perfect, and you have to fiddle with it to get it right for a lingusitics talk (Iâ€™ll blog more about this soon), but the results are impressive.</p>

<h2 id="notes">Notes</h2>
<div class="footnotes">
  <ol>
    <li id="fn:TIPA">
      <p>Aside from the difficulty it causes using XeLaTeX.Â <a href="#fnref:TIPA" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:unicode">
      <p>Actually, thatâ€™s not really necessary. If you are using OSX, you can insert characters using the option â€˜insert Emoji and Symbolsâ€™. Presumably something similar exists on windows. Alternatively, you can write unicode directly using keyboard combinations, at least on Linux.Â <a href="#fnref:unicode" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:fonts">
      <p>This is <strong>not</strong> an exhaustive list of unicode capable fonts, just the ones that Iâ€™m familiar with.Â <a href="#fnref:fonts" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:maclibrary">
      <p>Itâ€™s needlessly slightly more complicated on OSX. You need the file directory <code class="highlighter-rouge">USER &gt; Library &gt; texmf &gt; tex &gt; latex &gt; local</code>, and for reasons I donâ€™t understand, Apple treats each userâ€™s Library file as a hidden one. You can get there from the finder by following <code class="highlighter-rouge">Go &gt; Home</code> in the menu (or hit <code class="highlighter-rouge">command + shift + b</code>), which will take you to the user directory. Then, type <code class="highlighter-rouge">command + shift + .</code> to show hidden files. Make the directory <code class="highlighter-rouge">texmf &gt; tex &gt; latex &gt; local</code> there, and anything you put there should be visible to LaTeX.Â <a href="#fnref:maclibrary" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:overleaf">
      <p>Overleaf is actually based on git, or was, I believe.Â <a href="#fnref:overleaf" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:githubtutorial">
      <p>Github for instance, while a wonderful service, really needs a tutorial that doesnâ€™t try to pack everything into one go.Â <a href="#fnref:githubtutorial" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET